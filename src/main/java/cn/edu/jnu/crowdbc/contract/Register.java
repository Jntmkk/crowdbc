package com.your.organisation.name;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple7;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.5.16.
 */
@SuppressWarnings("rawtypes")
public class Register extends Contract {
    public static final String BINARY = "";

    public static final String FUNC_ADDACCEPTTASK = "addAcceptTask";

    public static final String FUNC_ADDPOSTTASK = "addPostTask";

    public static final String FUNC_CHECKADDR = "checkAddr";

    public static final String FUNC_GETMANAGERADDR = "getManagerAddr";

    public static final String FUNC_GETREPUTATIONAVG = "getReputationAvg";

    public static final String FUNC_GETUSERINFORMATION = "getUserInformation";

    public static final String FUNC_GETUSERREPUTATION = "getUserReputation";

    public static final String FUNC_ISREGISTER = "isRegister";

    public static final String FUNC_LOGIN = "login";

    public static final String FUNC_REGISTER = "register";

    public static final String FUNC_UPDATEFINISHTASKNUM = "updateFinishTaskNum";

    public static final String FUNC_UPDATEPASSWORD = "updatePassword";

    public static final String FUNC_UPDATEPROFILE = "updateProfile";

    public static final String FUNC_UPDATEUSERREPUTATION = "updateUserReputation";

    @Deprecated
    protected Register(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Register(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Register(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Register(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<TransactionReceipt> addAcceptTask(String username) {
        final Function function = new Function(
                FUNC_ADDACCEPTTASK, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(username)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addPostTask(String username) {
        final Function function = new Function(
                FUNC_ADDPOSTTASK, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(username)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> checkAddr(String username, String addr) {
        final Function function = new Function(FUNC_CHECKADDR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(username), 
                new org.web3j.abi.datatypes.Address(160, addr)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> getManagerAddr() {
        final Function function = new Function(FUNC_GETMANAGERADDR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> getReputationAvg() {
        final Function function = new Function(FUNC_GETREPUTATIONAVG, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple7<String, String, String, BigInteger, BigInteger, BigInteger, BigInteger>> getUserInformation(String username) {
        final Function function = new Function(FUNC_GETUSERINFORMATION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(username)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple7<String, String, String, BigInteger, BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple7<String, String, String, BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple7<String, String, String, BigInteger, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<String, String, String, BigInteger, BigInteger, BigInteger, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue());
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> getUserReputation(String username) {
        final Function function = new Function(FUNC_GETUSERREPUTATION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(username)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Boolean> isRegister(String addr, String username) {
        final Function function = new Function(FUNC_ISREGISTER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, addr), 
                new org.web3j.abi.datatypes.Utf8String(username)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> login(String username, String password) {
        final Function function = new Function(FUNC_LOGIN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(username), 
                new org.web3j.abi.datatypes.Utf8String(password)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> register(String addr, String username, String password, String profile) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, addr), 
                new org.web3j.abi.datatypes.Utf8String(username), 
                new org.web3j.abi.datatypes.Utf8String(password), 
                new org.web3j.abi.datatypes.Utf8String(profile)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateFinishTaskNum(String username) {
        final Function function = new Function(
                FUNC_UPDATEFINISHTASKNUM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(username)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updatePassword(String username, String newPassword) {
        final Function function = new Function(
                FUNC_UPDATEPASSWORD, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(username), 
                new org.web3j.abi.datatypes.Utf8String(newPassword)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateProfile(String username, String newProfile) {
        final Function function = new Function(
                FUNC_UPDATEPROFILE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(username), 
                new org.web3j.abi.datatypes.Utf8String(newProfile)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateUserReputation(String username, BigInteger newReputation) {
        final Function function = new Function(
                FUNC_UPDATEUSERREPUTATION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(username), 
                new org.web3j.abi.datatypes.generated.Uint256(newReputation)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static Register load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Register(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Register load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Register(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Register load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Register(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Register load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Register(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Register> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Register.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<Register> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Register.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Register> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Register.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Register> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Register.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }
}
